
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper Functions
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isAdmin() {
      // This function can now work reliably because any authenticated user can read the admins collection.
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // User Profiles
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if isOwner(userId) || isAdmin();
    }
    
    // Admin list
    // This allows any authenticated user to check for the existence of admin documents,
    // which is required during the login flow to verify admin status.
    // This is safe as these documents typically do not contain sensitive data.
    match /admins/{adminId} {
      allow read: if request.auth != null;
    }
    
    // KYC Submissions
    match /kycSubmissions/{userId} {
      // Allow a user to create a submission for themselves.
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      // Allow admins to read or delete submissions after processing.
      allow read, delete: if isAdmin();
    }
    
    // Chat
    match /chats/{chatId} {
      allow read, write: if request.auth != null && request.auth.uid in resource.data.participants;
      
      match /messages/{messageId} {
        allow read, create: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        allow update: if isOwner(get(/databases/$(database)/documents/chats/$(chatId)/messages/$(messageId)).data.senderId);
      }
    }
    
    // Config
    match /config/{docId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
  }
}
