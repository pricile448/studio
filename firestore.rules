
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    // Helper Functions
    // =================================
    function isAdmin() {
      // Check if the user's UID exists in the 'admins' collection.
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    function isOwner(userId) {
      // Check if the requesting user is the owner of the document.
      return request.auth.uid == userId;
    }

    // =================================
    // Users Collection
    // =================================
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      
      // Anyone authenticated can create their own user document upon signup.
      // We are assuming the backend sets the initial data correctly and securely.
      allow create: if isOwner(userId);
      
      // Update rule is more complex to protect sensitive data.
      allow update: if isAdmin() || (isOwner(userId) && (isGeneralProfileUpdate() || isKycSubmissionUpdate()));

      function isGeneralProfileUpdate() {
        // A general update is allowed if it does NOT touch protected fields.
        let protectedKeys = ['accounts', 'transactions', 'kycStatus', 'iban', 'bic', 'uid', 'email', 'createdAt'];
        return request.resource.data.diff(resource.data).affectedKeys().hasNone(protectedKeys);
      }
      
      function isKycSubmissionUpdate() {
        // A KYC submission is a specific allowed transition.
        return resource.data.kycStatus == 'unverified' 
            && request.resource.data.kycStatus == 'pending'
            // Ensure only KYC related fields are part of this update.
            && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['kycStatus', 'kycDocuments', 'kycSubmittedAt']);
      }
    }

    // =================================
    // Chats Collection
    // =================================
    match /chats/{chatId} {
      // Users can read/write to chats they are a part of. Admins have full access.
      allow read, write: if request.auth.uid in resource.data.participants || isAdmin();

      match /messages/{messageId} {
        allow read, create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants || isAdmin();
        
        // Users can "soft delete" (update a flag) their own messages. Admins can do anything.
        allow update: if (isOwner(request.resource.data.senderId) && request.resource.data.deletedForUser == true && resource.data.deletedForUser == false) || isAdmin();
        
        // Only admins can permanently delete messages.
        allow delete: if isAdmin();
      }
    }
    
    // =================================
    // Config Collection
    // =================================
    match /config/billing {
      // Any authenticated user can read the billing info.
      allow read: if request.auth.uid != null;
      // Only admins can change the billing info.
      allow write: if isAdmin();
    }
    
    // =================================
    // Admins Collection
    // =================================
    match /admins/{adminId} {
      // Only admins can read or write to the admins collection.
      allow read, write: if isAdmin();
    }
  }
}
