rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAdmin() {
      return request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isChatParticipant(chatId) {
      return request.auth != null && request.auth.uid in chatId.split('_');
    }

    // --- Global Admin Rule ---
    // Admins have full read/write access to all collections for management.
    match /{document=**} {
      allow read, write: if isAdmin();
    }

    // --- User Profile Rules ---
    match /users/{userId} {
      
      // READ: A user can read their own profile.
      allow read: if isOwner(userId);
      
      // CREATE: A user can create their own profile document.
      allow create: if isOwner(userId);

      // UPDATE: A user can update their own profile under specific conditions.
      allow update: if isOwner(userId) && (
        // Condition 1: General profile update (safe fields that a user can change)
        (
          request.resource.data.diff(resource.data).affectedKeys().hasAll(['firstName', 'lastName', 'phone', 'dob', 'address', 'city', 'postalCode', 'residenceCountry', 'notificationPrefs', 'inactivityTimeout'])
        ) ||
        // Condition 2: Requesting a card
        (
          request.resource.data.cardStatus == 'requested' &&
          resource.data.cardStatus == 'none' &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['cardStatus', 'cardRequestedAt'])
        ) ||
        // Condition 3: Making an internal transfer
        (
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['accounts', 'transactions'])
        ) ||
        // Condition 4: Creating/updating budgets or beneficiaries
        (
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['budgets', 'beneficiaries', 'documents'])
        ) ||
        // Condition 5: KYC Submission (client only updates status to pending)
        (
            request.resource.data.kycStatus == 'pending' &&
            resource.data.kycStatus == 'unverified' &&
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['kycStatus', 'kycSubmittedAt'])
        )
      );
    }

    // --- Messaging Rules ---
    match /chats/{chatId} {
      allow read, create, update: if isChatParticipant(chatId);
      
      match /messages/{messageId} {
        allow read, create: if isChatParticipant(chatId);
        
        // A user can "soft delete" (update) their own message.
        allow update: if isOwner(resource.data.senderId) &&
                         'deletedForUser' in request.resource.data &&
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['deletedForUser']);

        // Only admins can permanently delete messages (via global rule).
        allow delete: if false; 
      }
    }
  }
}
