rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Fonctions utilitaires ---
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    function isParticipant(participants) {
      return request.auth != null && participants.hasAny([request.auth.uid]);
    }

    // --- Accès admins : tout permis ---
    match /{document=**} {
      allow read, write: if isAdmin();
    }

    // --- Utilisateurs ---
    match /users/{userId} {
      // Lecture : uniquement soi-même
      allow read: if isOwner(userId);

      // Création : à l'inscription
      allow create: if isOwner(userId);

      // Mise à jour : règles fines selon le contexte
      allow update: if isOwner(userId) && canUserUpdate();

      function canUserUpdate() {
        let affected = request.resource.data.diff(resource.data).affectedKeys();

        // Mise à jour générale (profil, bénéficiaires, budgets, etc.)
        // L'utilisateur ne peut pas modifier lui-même les champs critiques.
        let isGeneralUpdate = !affected.hasAny([
          'kycStatus', 'accounts', 'transactions', 'cardStatus', 'physicalCard',
          'uid', 'email', 'createdAt', 'iban', 'bic', 'balance'
        ]);

        // Ajout/suppression de bénéficiaires
        let isManagingBeneficiaries = affected.hasOnly(['beneficiaries']);
        // Ajout/suppression de budgets
        let isManagingBudgets = affected.hasOnly(['budgets']);
        // Ajout de documents personnels
        let isManagingDocuments = affected.hasOnly(['documents']);

        // Demande de carte physique/virtuelle
        let isRequestingPhysicalCard = resource.data.cardStatus == 'none'
          && request.resource.data.cardStatus == 'requested'
          && affected.hasOnly(['cardStatus', 'cardType', 'cardRequestedAt']);
        let isRequestingVirtualCard = (resource.data.hasPendingVirtualCardRequest == false || resource.data.hasPendingVirtualCardRequest == null)
          && request.resource.data.hasPendingVirtualCardRequest == true
          && affected.hasOnly(['hasPendingVirtualCardRequest', 'virtualCardRequestedAt']);

        // Blocage/déblocage carte par l'utilisateur
        let isTogglingCardFreeze = (resource.data.cardStatus == 'active' || resource.data.cardStatus == 'suspended')
          && request.resource.data.physicalCard.suspendedBy != 'admin'
          && affected.hasOnly(['cardStatus', 'physicalCard']);

        return isGeneralUpdate
          || isManagingBeneficiaries
          || isManagingBudgets
          || isManagingDocuments
          || isRequestingPhysicalCard
          || isRequestingVirtualCard
          || isTogglingCardFreeze;
      }
    }
    
    // --- KYC Submissions (New) ---
    match /kycSubmissions/{userId} {
      // The user can create their own submission document.
      allow create: if isOwner(userId) && request.resource.data.userId == userId;

      // Only admins can read/update/delete submissions.
      allow read, update, delete: if isAdmin();
    }

    // --- Admins ---
    match /admins/{adminId} {
      allow read, write: if isOwner(adminId);
    }

    // --- Config (facturation) ---
    match /config/{docId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    // --- Messagerie sécurisée ---
    match /chats/{chatId} {
      allow read, write: if isParticipant(resource.data.participants);

      // Sous-collection messages
      match /messages/{messageId} {
        allow read: if isParticipant(get(/databases/$(database)/documents/chats/$(chatId)).data.participants);
        allow create: if isParticipant(get(/databases/$(database)/documents/chats/$(chatId)).data.participants);
        allow update: if request.auth.uid == resource.data.senderId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['deletedForUser']);
        allow delete: if isAdmin();
      }
    }
  }
}
