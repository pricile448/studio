rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAppendingToList(listName) {
      // Handle the case where the list doesn't exist yet
      let beforeSize = resource.data.keys().has(listName) ? resource.data[listName].size() : 0;
      return request.resource.data[listName].size() == beforeSize + 1;
    }

    match /admins/{adminId} {
      allow read, write: if isAuthenticated() && get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.isAdmin == true;
    }
    
    match /users/{userId} {
      allow read, create: if isOwner(userId);

      allow update: if isAuthenticated() && isOwner(userId) && (
        // Profile Update: Allow updating a specific set of non-sensitive fields.
        request.resource.data.diff(resource.data).affectedKeys().hasOnly([
            'firstName', 'lastName', 'phone', 'dob', 'address', 'city', 
            'postalCode', 'residenceCountry', 'profession', 'salary', 
            'notificationPrefs', 'inactivityTimeout'
        ])
        ||
        // Physical Card Request: Allow user to change status from 'none' to 'requested' and add a timestamp.
        (
          request.resource.data.cardStatus == 'requested' &&
          resource.data.cardStatus == 'none' &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['cardStatus', 'cardRequestedAt'])
        )
        ||
        // Virtual Card Generation: Allow user to add one card to the virtualCards list.
        (
          isAppendingToList('virtualCards') &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['virtualCards'])
        )
      );
    }

    match /chats/{chatId} {
      allow read, write: if isAuthenticated() && request.auth.uid in resource.data.participants;

      match /messages/{messageId} {
        allow read: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        
        allow create: if isAuthenticated() 
                      && request.auth.uid == request.resource.data.senderId 
                      && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;

        allow update: if isAuthenticated()
                      && resource.data.senderId == request.auth.uid
                      && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['deletedForUser'])
                      && request.resource.data.deletedForUser == true;
      }
    }
  }
}
