rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    function isProfileOwner(userId) {
      return request.auth.uid == userId;
    }

    // --- Profile Update Functions ---
    // User is only updating their own general profile info
    function isUpdatingOwnProfile(userId) {
        let allowedFields = ['firstName', 'lastName', 'phone', 'dob', 'address', 'city', 'postalCode', 'residenceCountry', 'notificationPrefs', 'inactivityTimeout'];
        return isProfileOwner(userId) && request.resource.data.keys().hasOnly(allowedFields);
    }
    
    // User is requesting a physical card for the first time
    function isRequestingPhysicalCard(userId) {
        let incomingData = request.resource.data;
        let existingData = resource.data;
        let allowedFields = ['cardStatus', 'cardType', 'cardRequestedAt'];
        
        return isProfileOwner(userId)
            && incomingData.keys().hasOnly(allowedFields)
            && (!('cardStatus' in existingData) || existingData.cardStatus == 'none')
            && incomingData.cardStatus == 'requested'
            && incomingData.cardType in ['essentielle', 'precieuse', 'luminax']
            && incomingData.cardRequestedAt == request.time;
    }

    // User is adding exactly one new virtual card
    function isAddingVirtualCard(userId) {
        let incomingData = request.resource.data;
        let existingData = resource.data;
        
        return isProfileOwner(userId)
            && incomingData.keys().hasOnly(['virtualCards'])
            && incomingData.virtualCards.size() == existingData.virtualCards.size() + 1
            && incomingData.virtualCards[incomingData.virtualCards.size() - 1].createdAt == request.time;
    }

    // --- Rules ---
    match /users/{userId} {
      allow read: if isProfileOwner(userId) || isAdmin();

      // Granular update rules
      allow update: if isSignedIn() && (
          isUpdatingOwnProfile(userId) ||
          isRequestingPhysicalCard(userId) ||
          isAddingVirtualCard(userId)
      );

      // Admins can update any user field
      allow update: if isAdmin();
      
      // Allow creation only if the user is creating their own document
      allow create: if isOwner(userId);
    }
    
    match /admins/{userId} {
        // Only allow reading your own admin status, or if you are already an admin
        allow get: if isOwner(userId) || isAdmin();
        // Allow admins to list other admins
        allow list: if isAdmin();
    }
    
    match /chats/{chatId} {
      allow read, write: if isSignedIn() && request.auth.uid in resource.data.participants;
      
      match /messages/{messageId} {
        allow read: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        allow create: if isSignedIn() && request.auth.uid == request.resource.data.senderId;
        allow update: if isSignedIn() && request.resource.data.keys().hasOnly(['deletedForUser']);
      }
    }
  }
}
