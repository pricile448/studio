rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    match /users/{userId} {
      // Les utilisateurs peuvent lire leur propre profil s'ils sont authentifiés.
      allow read: if request.auth != null && request.auth.uid == userId;

      // Un nouvel utilisateur peut créer son propre profil.
      // Des règles de validation sont appliquées pour s'assurer que les données initiales sont correctes.
      allow create: if request.auth != null && request.auth.uid == userId
                    && request.resource.data.uid == userId
                    && request.resource.data.email == request.auth.token.email
                    && request.resource.data.kycStatus == 'unverified'
                    && request.resource.data.createdAt == request.time;
      
      // Un utilisateur peut mettre à jour son propre profil, avec des restrictions.
      allow update: if request.auth != null && request.auth.uid == userId
                     && canUpdateProfile(request.resource.data, resource.data);
    }
  }
  
  // Fonction d'aide pour valider les mises à jour du profil utilisateur.
  function canUpdateProfile(incomingData, existingData) {
    // Liste des champs que l'utilisateur a le droit de modifier lui-même.
    let userModifiableFields = ['firstName', 'lastName', 'dob', 'address', 'notificationPrefs', 'photoURL'];
    
    // Obtenir la liste des clés qui ont été modifiées dans la requête.
    let changedKeys = incomingData.diff(existingData).affectedKeys();

    // Cas 1 : L'utilisateur soumet sa vérification KYC.
    // La seule modification autorisée est celle du champ kycStatus de 'unverified' à 'pending'.
    if (changedKeys.has('kycStatus')) {
      return changedKeys.size() == 1 // S'assurer que SEUL kycStatus est modifié
        && existingData.kycStatus == 'unverified'
        && incomingData.kycStatus == 'pending';
    }

    // Cas 2 : L'utilisateur met à jour son profil.
    // On vérifie que toutes les clés modifiées font partie des champs autorisés.
    // `removeAll` retourne les éléments de `changedKeys` qui ne sont PAS dans `userModifiableFields`.
    // Si la taille est 0, cela signifie que toutes les modifications sont autorisées.
    let unauthorizedChanges = changedKeys.removeAll(userModifiableFields);
    
    // On s'assure également que le statut KYC n'est pas modifié illicitement.
    return unauthorizedChanges.size() == 0
           && incomingData.kycStatus == existingData.kycStatus;
  }
}
