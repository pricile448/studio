
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // == Fonctions utilitaires ==
    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuth() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // == Règles par collection ==
    
    // Users:
    match /users/{userId} {
      // L'utilisateur peut lire, créer son profil. L'admin peut lire n'importe quel profil.
      allow read, create: if isOwner(userId) || isAdmin();
      
      // Un admin peut tout mettre à jour.
      // Un utilisateur ne peut mettre à jour que les champs non protégés.
      allow update: if isAdmin() || (isOwner(userId) && !isUpdatingProtectedFields());
    }

    function isUpdatingProtectedFields() {
      return 'kycStatus' in request.resource.data ||
             'cardStatus' in request.resource.data ||
             'iban' in request.resource.data ||
             'bic' in request.resource.data;
    }

    // Admins:
    match /admins/{adminId} {
      allow read, write: if isOwner(adminId);
    }

    // Chats:
    match /chats/{chatId} {
      // Un utilisateur peut lire ou créer une conversation si son UID est dans l'ID du document.
      // Un admin peut tout lire ou créer.
      // Cette règle évite les erreurs de permission sur les documents supprimés.
      allow read, create: if isAdmin() || (isAuth() && chatId.split('_').includes(request.auth.uid));

      // Seul un admin peut supprimer ou mettre à jour la conversation principale.
      allow update, delete: if isAdmin();

      match /messages/{messageId} {
        // Pour lire ou créer un message, l'utilisateur doit être un participant au chat.
        // On vérifie d'abord que le chat parent existe. Les admins ont toujours accès.
        allow read, create: if isAdmin() || (
                              exists(/databases/$(database)/documents/chats/$(chatId)) &&
                              (request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants)
                            );

        // Un utilisateur ne peut que "soft-delete" (cacher) ses propres messages.
        allow update: if isAuth() &&
                        resource.data.senderId == request.auth.uid &&
                        request.resource.data.keys().hasOnly(['deletedForUser']) &&
                        request.resource.data.deletedForUser == true;
        
        // La suppression physique est réservée aux admins.
        allow delete: if isAdmin();
      }
    }
  }
}
