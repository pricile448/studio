
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =====================================================================
    // Fonctions d'Aide
    // =====================================================================

    // Vérifie si l'utilisateur authentifié est un administrateur.
    function isAdmin() {
      // L'utilisateur doit être connecté et son UID doit exister dans la collection 'admins'.
      return request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // Vérifie si l'utilisateur authentifié est le propriétaire du document.
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Vérifie si l'utilisateur authentifié est un participant à la conversation.
    // Important : Vérifie d'abord que la conversation existe avant de lire ses données.
    // Cela empêche les erreurs de permission si le chat est supprimé.
    function isChatParticipant(chatId) {
      let chatExists = exists(/databases/$(database)/documents/chats/$(chatId));
      // Si la conversation existe, vérifier si l'UID de l'utilisateur est dans la liste des participants.
      return request.auth != null && chatExists && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
    }

    // =====================================================================
    // Règles par Collection
    // =====================================================================

    // Collection 'admins'
    // Seuls les administrateurs peuvent gérer la liste des administrateurs.
    match /admins/{adminId} {
      allow read, write: if isAdmin();
    }

    // Collection 'users'
    match /users/{userId} {
      // LECTURE: L'utilisateur peut lire son propre profil, ou un admin peut lire n'importe quel profil.
      allow read: if isOwner(userId) || isAdmin();
      
      // CRÉATION: Un utilisateur peut créer son propre profil (à l'inscription).
      allow create: if isOwner(userId);
      
      // MISE À JOUR:
      // - Un admin peut tout mettre à jour.
      // - Un utilisateur peut mettre à jour son propre profil, MAIS PAS les champs sensibles gérés par le système.
      allow update: if isAdmin() || 
                       (isOwner(userId) &&
                         !('kycStatus' in request.resource.data) &&
                         !('cardStatus' in request.resource.data) &&
                         !('iban' in request.resource.data) &&
                         !('bic' in request.resource.data) &&
                         !('accounts' in request.resource.data) &&
                         !('transactions' in request.resource.data)
                       );
    }

    // Collection 'chats' et sous-collection 'messages'
    match /chats/{chatId} {
      // LECTURE, CRÉATION, SUPPRESSION (pour la conversation entière): Permis pour les participants et les admins.
      allow read, create, delete: if isChatParticipant(chatId) || isAdmin();
      
      // MISE À JOUR (pour la conversation, ex: lastMessage): Permis pour les participants et les admins.
      allow update: if isChatParticipant(chatId) || isAdmin();
      
      match /messages/{messageId} {
        // LECTURE, CRÉATION: Permis si l'utilisateur participe à la conversation.
        // La fonction `isChatParticipant` gère le cas où le chat n'existe plus, évitant l'erreur.
        allow read, create: if isChatParticipant(chatId) || isAdmin();
        
        // MISE À JOUR:
        // - Un admin peut tout mettre à jour.
        // - Un utilisateur peut mettre à jour (suppression logique) uniquement ses propres messages.
        allow update: if isAdmin() || (isOwner(resource.data.senderId) && request.resource.data.deletedForUser == true);
                        
        // SUPPRESSION (DÉFINITIVE): Interdite pour les clients, permise seulement pour les admins.
        allow delete: if isAdmin();
      }
    }
  }
}
