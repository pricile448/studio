
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Fonctions utilitaires ---
    function isAdmin() {
      // Check if the user's UID exists in the 'admins' collection.
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    function isOwner(userId) {
      // Check if the authenticated user is the owner of the document.
      return request.auth != null && request.auth.uid == userId;
    }
    function isParticipant(chatParticipants) {
      // Check if the authenticated user is a participant in the chat.
      return request.auth != null && request.auth.uid in chatParticipants;
    }

    // --- Règle globale pour les admins ---
    // Les administrateurs ont un accès complet en lecture/écriture à toute la base de données.
    match /{path=**} {
      allow read, write: if isAdmin();
    }

    // --- Collection des utilisateurs ---
    match /users/{userId} {
      // LECTURE : Un utilisateur ne peut lire que son propre document.
      allow read: if isOwner(userId);

      // CRÉATION : Un utilisateur peut créer son propre document lors de l'inscription.
      // Le document doit correspondre à son UID.
      allow create: if isOwner(userId);

      // MISE À JOUR : Règle temporaire pour le débogage
      // Cette règle autorise un utilisateur à mettre à jour n'importe quel champ
      // de son propre profil. C'est pour tester si le problème de permission
      // vient de l'authentification (isOwner) ou de la logique de validation des champs.
      // ATTENTION : Cette règle est trop permissive pour la production.
      allow update: if isOwner(userId);

      // SUPPRESSION : La suppression des comptes n'est pas autorisée depuis le client.
      allow delete: if false;
    }

    // --- Collection des administrateurs ---
    match /admins/{adminId} {
      // Seul un administrateur peut lire et modifier son propre document (si nécessaire).
      allow read, write: if isOwner(adminId);
    }

    // --- Collection de configuration ---
    match /config/{docId} {
      // N'importe quel utilisateur authentifié peut lire la configuration (ex: facturation).
      allow read: if request.auth != null;
      // Seuls les admins peuvent écrire dans la configuration.
      allow write: if isAdmin();
    }

    // --- Collection des chats ---
    match /chats/{chatId} {
      // Un utilisateur peut lire/écrire les métadonnées d'un chat s'il en est participant.
      allow read, write: if isParticipant(resource.data.participants);

      // Sous-collection des messages
      match /messages/{messageId} {
        // LIRE : Un participant peut lire les messages.
        allow read: if isParticipant(get(/databases/$(database)/documents/chats/$(chatId)).data.participants);
        // CRÉER : Un participant peut créer un message.
        allow create: if isParticipant(get(/databases/$(database)/documents/chats/$(chatId)).data.participants);
        // METTRE À JOUR : L'expéditeur peut marquer son propre message comme "supprimé" (soft delete).
        allow update: if isOwner(resource.data.senderId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['deletedForUser']);
        // SUPPRIMER : Seuls les admins peuvent supprimer définitivement un message.
        allow delete: if isAdmin();
      }
    }
  }
}
