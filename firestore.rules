
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isAdmin() {
      // Use get() instead of exists() for better performance on a specific path
      return request.auth != null && get(/databases/$(database)/documents/admins/$(request.auth.uid)).data != null;
    }
    
    // Admins collection
    match /admins/{adminId} {
      allow read: if request.auth != null;
      allow write: if false; // Nobody can write to the admin list directly
    }

    // KYC Submissions collection
    match /kycSubmissions/{userId} {
      allow create: if isOwner(userId);
      allow read, delete: if isAdmin();
      allow update: if false;
    }

    // Config collection
    match /config/{docId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    // Chat collection
    match /chats/{chatId} {
      function isParticipant() {
        return request.auth.uid in resource.data.participants;
      }
      allow read, update, delete: if isAdmin() || isParticipant();
      allow create: if request.auth != null;
      
      match /messages/{messageId} {
        function isChatParticipant() {
          return request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        }
        
        function isSender() {
            return isOwner(request.resource.data.senderId);
        }

        function isSoftDeleting() {
          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['deletedForUser']);
        }

        allow read, create: if isAdmin() || isChatParticipant();
        allow update: if (isAdmin() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['deletedForAdmin'])) || (isSender() && isSoftDeleting());
        allow delete: if isAdmin();
      }
    }

    // Users collection
    match /users/{userId} {
      // Admins can read all user profiles, users can only read their own.
      allow read: if isOwner(userId) || isAdmin();
      
      // Only new users can create their own document.
      allow create: if isOwner(userId);
      
      // Users can update their own document based on specific rules.
      allow update: if isOwner(userId);
    }
  }
}
