
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- HELPER FUNCTIONS ---
    function isAuthOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isAdmin() {
      // Check if the requesting user's UID exists in the 'admins' collection
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // --- USER DOCUMENT RULES ---
    match /users/{userId} {
      allow read: if isAuthOwner(userId) || isAdmin();
      allow create: if isAuthOwner(userId); // For signup
      
      // An update is allowed if it's from an admin OR the owner performing a valid action
      allow update: if isAdmin() || (isAuthOwner(userId) && (
                      isUpdatingOwnProfile(request, resource) ||
                      isSubmittingKyc(request, resource)
                    ));
    }
    
    // --- USER UPDATE LOGIC ---
    function isUpdatingOwnProfile(req, res) {
      // These fields can be updated by the user at any time from their profile page
      let allowedFields = [
        'firstName', 'lastName', 'phone', 'dob', 'pob', 'nationality', 'residenceCountry',
        'address', 'city', 'postalCode', 'profession', 'salary', 'photoURL',
        'notificationPrefs', 'inactivityTimeout', 'beneficiaries', 'budgets',
        'documents', 'virtualCards', 'cardLimits', 'hasPendingVirtualCardRequest',
        'virtualCardRequestedAt', 'cardStatus', 'physicalCard'
      ];
      // Check that the update ONLY contains fields from the allowed list
      return req.resource.data.diff(res.data).affectedKeys().hasOnly(allowedFields);
    }
    
    function isSubmittingKyc(req, res) {
      // This is a specific transaction for KYC.
      // It allows updating only the KYC-related fields, and only if the current status is 'unverified'.
      let kycFields = ['kycStatus', 'kycSubmittedAt', 'kycDocuments'];
      return res.data.kycStatus == 'unverified'
             && req.resource.data.kycStatus == 'pending'
             && req.resource.data.kycSubmittedAt == request.time
             && req.resource.data.diff(res.data).affectedKeys().hasOnly(kycFields);
    }

    // --- OTHER RULES ---
    
    match /admins/{adminId} {
      allow read, write: if isAdmin();
    }
    
    match /chats/{chatId} {
      allow read, create, update: if request.auth.uid in resource.data.participants;
    }

    match /chats/{chatId}/messages/{messageId} {
      allow read, create, update: if get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
      allow delete: if get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
    }

    match /config/billing {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
  }
}
