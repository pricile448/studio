rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Fonction d'aide pour vérifier si l'utilisateur est un administrateur.
    function isAdmin() {
      // Un administrateur doit avoir un document correspondant à son UID dans la collection 'admins'.
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // Collection des administrateurs : seul un administrateur peut lire et écrire.
    match /admins/{adminId} {
      allow read, write: if isAdmin();
    }

    // Collection des utilisateurs :
    match /users/{userId} {
      // Un utilisateur peut lire son propre document. Un admin peut lire tous les documents.
      allow read: if request.auth.uid == userId || isAdmin();
      // Seuls les admins peuvent lister, créer ou supprimer des profils utilisateurs.
      allow list, create, delete: if isAdmin();

      // Règle de mise à jour principale.
      // Un admin peut tout mettre à jour. Un utilisateur ne peut mettre à jour que certains champs.
      allow update: if isAdmin() || (request.auth.uid == userId && isUpdatingAllowedFields());

      // Fonction d'aide pour la mise à jour par l'utilisateur.
      function isUpdatingAllowedFields() {
        // Champs que l'utilisateur N'EST PAS autorisé à modifier directement.
        // L'admin gère kycStatus, iban, bic, etc.
        let nonUpdatableByUser = [
          'uid', 'email', 'createdAt', 'kycStatus', 'kycSubmittedAt',
          'kycDocuments', 'iban', 'bic', 'accounts'
        ];
        
        // La fonction renvoie 'true' si la requête de mise à jour ne contient AUCUN
        // des champs interdits listés ci-dessus.
        // Les autres champs (profil, bénéficiaires, demandes de virement) sont gérés
        // par la logique sécurisée côté serveur/client.
        return !request.resource.data.keys().hasAny(nonUpdatableByUser);
      }
    }
    
    // Collection des conversations (chats) :
    match /chats/{chatId} {
      // Un utilisateur peut lire/écrire une conversation s'il en est participant. Un admin peut accéder à tout.
      allow read, write: if request.auth.uid in resource.data.participants || isAdmin();
      
      // Sous-collection des messages :
      match /messages/{messageId} {
         // Un utilisateur peut lire les messages d'une conversation à laquelle il participe.
         allow read: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants || isAdmin();
         // Un utilisateur peut créer un message s'il en est l'expéditeur.
         allow create: if request.auth.uid == request.resource.data.senderId;
         // Un utilisateur peut "supprimer pour soi" (soft delete) ses propres messages.
         allow update: if request.auth.uid == resource.data.senderId && request.resource.data.keys().hasOnly(['deletedForUser']);
         // Seul un admin peut supprimer définitivement un message.
         allow delete: if isAdmin();
      }
    }
  }
}
