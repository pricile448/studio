
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // HELPER FUNCTIONS
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isAdmin() {
      // Check if the requesting user's UID exists in the /admins collection
      return request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // ADMINS COLLECTION
    match /admins/{adminId} {
      allow read: if request.auth != null; // Allow any authenticated user to check admin status
      allow write: if false; // Prevent client-side writes to admins collection
    }

    // KYC SUBMISSIONS COLLECTION
    // This is the new, crucial rule.
    match /kycSubmissions/{userId} {
      // An authenticated user can create their own submission.
      allow create: if isOwner(userId);
      
      // An owner can read their own submission (for status checks), and an admin can read any.
      allow read: if isOwner(userId) || isAdmin();
      
      // Only admins can list all submissions (for the admin panel) or delete them.
      allow list, delete: if isAdmin();

      // No one can update a submission document directly.
      allow update: if false;
    }

    // USERS COLLECTION
    match /users/{userId} {
      // Admins can read any user profile. A user can only read their own.
      allow read: if isOwner(userId) || isAdmin();

      // Users can update a limited set of their own profile fields.
      // KYC-related fields are NOT updatable by the user here.
      function canUpdateOwnProfile() {
        let allowedFields = ['firstName', 'lastName', 'phone', 'dob', 'address', 'city', 'postalCode', 'residenceCountry', 'profession', 'salary', 'notificationPrefs', 'inactivityTimeout'];
        return request.resource.data.keys().hasOnly(allowedFields);
      }
      
      allow update: if isOwner(userId) && canUpdateOwnProfile();

      // Nobody can create a user document directly, it's done via backend functions.
      allow create: if false;
      allow delete: if isAdmin(); // Only admins can delete users
    }

    // CHATS COLLECTION
    match /chats/{chatId} {
        allow read, write: if request.auth != null && request.auth.uid in resource.data.participants;
        
        match /messages/{messageId} {
            allow read, create: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
            // A user can "soft delete" their own messages.
            allow update: if request.auth != null && request.auth.uid == resource.data.senderId && request.resource.data.keys().hasOnly(['deletedForUser']);
            allow delete: if false;
        }
    }

    // CONFIG COLLECTION (e.g., for billing)
    match /config/{docId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
  }
}
