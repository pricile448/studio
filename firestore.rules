rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isAdmin() {
      return request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    function isChatParticipant(chatId) {
      return request.auth != null && request.auth.uid in chatId.split('_');
    }

    function isUpdatingAllowedProfileFields() {
      // The user can update these general profile fields.
      let allowedFields = ['firstName', 'lastName', 'phone', 'dob', 'pob', 'nationality', 'residenceCountry', 'address', 'city', 'postalCode', 'profession', 'salary', 'photoURL', 'notificationPrefs', 'inactivityTimeout', 'documents'];
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allowedFields);
    }

    function isRequestingCard() {
      // This happens when a user requests a card for the first time.
      let changedKeys = request.resource.data.diff(resource.data).affectedKeys();
      return changedKeys.hasAll(['cardStatus', 'cardRequestedAt']) &&
             changedKeys.size() == 2 &&
             request.resource.data.cardStatus == 'requested' &&
             resource.data.cardStatus == 'none';
    }

    function isPerformingInternalTransfer() {
      // This is a simplified check. It ensures only accounts and transactions are touched.
      let changedKeys = request.resource.data.diff(resource.data).affectedKeys();
      return changedKeys.hasAll(['accounts', 'transactions']) && changedKeys.size() == 2;
    }
    
    function isSubmittingKyc() {
        // Allows user to update their status to 'pending' and add submission timestamp.
        let changedKeys = request.resource.data.diff(resource.data).affectedKeys();
        return changedKeys.hasAll(['kycStatus', 'kycSubmittedAt']) &&
               changedKeys.size() == 2 &&
               request.resource.data.kycStatus == 'pending' &&
               resource.data.kycStatus == 'unverified';
    }


    // --- Admin Rules ---
    // Admins have full read/write access to all collections for management purposes.
    match /{path=**} {
      allow read, write: if isAdmin();
    }

    // --- User Rules ---
    match /users/{userId} {
      allow read, create: if isOwner(userId);
      
      // Update is allowed if it's one of the approved user-driven scenarios.
      allow update: if isOwner(userId) && (
        isUpdatingAllowedProfileFields() ||
        isRequestingCard() ||
        isPerformingInternalTransfer() ||
        isSubmittingKyc()
      );
    }

    // --- Chat Rules ---
    match /chats/{chatId} {
      allow read, create, update: if isChatParticipant(chatId);
      
      match /messages/{messageId} {
        allow read, create: if isChatParticipant(chatId);
        
        // A user can "soft delete" their own message.
        allow update: if isOwner(resource.data.senderId) &&
                         'deletedForUser' in request.resource.data &&
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['deletedForUser']);

        // Only admins can hard delete.
        allow delete: if false; 
      }
    }
  }
}
