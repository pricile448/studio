rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ==================
    // Helper Functions
    // ==================
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      // Vérifie si l'UID de l'utilisateur existe dans la collection des administrateurs.
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // ==================
    // User Collection
    // ==================
    match /users/{userId} {
      allow read, create: if isOwner(userId);
      allow write: if isAdmin(); // Les administrateurs ont un accès en écriture complet.
      
      // Les utilisateurs peuvent mettre à jour leur propre document sous des conditions spécifiques.
      allow update: if isOwner(userId) && canUpdateOwnProfile(request, resource);
    }
    
    function canUpdateOwnProfile(req, res) {
      // --- Règle 1: Un utilisateur ne peut pas modifier les champs protégés ---
      // Ces champs ne peuvent être définis qu'à la création ou modifiés par un administrateur.
      let isChangingProtectedFields = 
          req.resource.data.uid != res.data.uid ||
          req.resource.data.email != res.data.email ||
          req.resource.data.createdAt != res.data.createdAt ||
          req.resource.data.kycStatus != res.data.kycStatus ||
          req.resource.data.iban != res.data.iban ||
          req.resource.data.bic != res.data.bic;
          
      if (isChangingProtectedFields) {
        return false;
      }
      
      // --- Règle 2: Un utilisateur ne peut que "demander" une carte ou la suspendre/réactiver ---
      let isChangingCardStatus = req.resource.data.cardStatus != res.data.cardStatus;
      if (isChangingCardStatus) {
        let isRequesting = req.resource.data.cardStatus == 'requested';
        let isFreezing = req.resource.data.cardStatus == 'suspended' && req.resource.data.physicalCard.suspendedBy == 'user';
        let isUnfreezing = req.resource.data.cardStatus == 'active' && res.data.cardStatus == 'suspended' && res.data.physicalCard.suspendedBy == 'user';
        if (!isRequesting && !isFreezing && !isUnfreezing) {
            return false;
        }
      }
      
      // --- Règle 3: Le solde d'un compte ne peut être modifié que par un administrateur ---
      // Cela est vérifié en s'assurant qu'aucun solde de compte n'est différent.
      // C'est la clé pour les demandes de virement : l'utilisateur ajoute une transaction en attente, mais son solde ne change pas.
      let hasBalanceChanged = req.resource.data.accounts.filter(
        (acc, i) => acc.balance != res.data.accounts[i].balance
      ).size() > 0;
      
      if (hasBalanceChanged) {
        return false;
      }
      
      // --- Règle 4: L'utilisateur ne peut ajouter qu'UNE seule nouvelle transaction à la fois ---
      // Ceci est une approximation pour s'assurer qu'il s'agit d'une demande de virement.
      // Le backend/admin validera les détails de la transaction.
      if (req.resource.data.transactions.size() > res.data.transactions.size()) {
        if (req.resource.data.transactions.size() != res.data.transactions.size() + 1) {
          return false; // Interdit d'ajouter plus d'une transaction à la fois.
        }
      }
      
      // Si toutes les vérifications passent, autoriser la mise à jour.
      // Cela couvre les mises à jour des informations de profil, des listes de bénéficiaires, des budgets, etc.
      return true;
    }
    
    // ==================
    // Admin Collection
    // ==================
    match /admins/{adminId} {
      allow read: if isOwner(adminId);
    }
    
    // ==================
    // Chat Collection
    // ==================
    match /chats/{chatId} {
      allow read, write: if request.auth.uid in resource.data.participants || isAdmin();
    }
    
    match /chats/{chatId}/messages/{messageId} {
      allow read: if (request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants) || isAdmin();
      
      // Seul l'expéditeur du message peut créer ou supprimer "logiquement" son message.
      // L'administrateur peut tout faire.
      allow create: if isOwner(request.resource.data.senderId) || isAdmin();
      allow update: if (isOwner(resource.data.senderId) && request.resource.data.deletedForUser == true) || isAdmin();
      // La suppression "dure" est réservée aux administrateurs via les règles de niveau supérieur.
    }
  }
}
