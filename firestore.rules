rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isUserAuthenticated() {
      return request.auth != null;
    }
    
    function isUser(uid) {
      return isUserAuthenticated() && request.auth.uid == uid;
    }

    function isAdmin() {
      // Check if the requesting user's UID exists in the 'admins' collection
      return isUserAuthenticated() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    function isChatParticipant(chatId) {
        return isUserAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
    }

    // Admins collection can only be read/written by other admins
    match /admins/{adminId} {
        allow read, write: if isAdmin();
    }

    // Users collection
    match /users/{userId} {
      // Admins can read/update any user profile. Users can only read/update their own.
      allow read, update: if isAdmin() || isUser(userId);
      
      // Only users can delete their own profile
      allow delete: if isUser(userId);
      
      // Allow new users to create their profile
      allow create: if isUser(userId);
    }
    
    // Chats collection
    match /chats/{chatId} {
        // Admins can manage any chat. Participants can read/write their own chat sessions.
        allow read, write, delete: if isAdmin() || isChatParticipant(chatId);
        
        match /messages/{messageId} {
            // Admins can read/create/delete any message. Participants can only read/create in their own chats.
            allow read, create, delete: if isAdmin() || isChatParticipant(chatId);
            
            // Users can "soft delete" their own messages by updating only the 'deletedForUser' field
            // if they are the sender of the message.
            allow update: if isChatParticipant(chatId) 
                          && request.resource.data.keys().hasOnly(['deletedForUser'])
                          && request.auth.uid == resource.data.senderId;
        }
    }
  }
}
