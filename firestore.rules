
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper Functions
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      // Check if the requesting user's UID exists in the 'admins' collection
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    function canUserUpdate(userId, data) {
        let isUpdatingProfile = data.keys().hasOnly(['firstName', 'lastName', 'phone', 'dob', 'address', 'city', 'postalCode', 'residenceCountry', 'profession', 'salary', 'notificationPrefs', 'inactivityTimeout']);
        let isUpdatingCardRequest = data.keys().hasOnly(['cardStatus', 'cardRequestedAt', 'cardType']);
        let isUpdatingVirtualCardRequest = data.keys().hasOnly(['hasPendingVirtualCardRequest', 'virtualCardRequestedAt']);
        let isTogglingCardFreeze = data.keys().hasOnly(['cardStatus', 'physicalCard']);
        let isUpdatingBeneficiaries = data.keys().hasAll(['beneficiaries']);
        
        return isOwner(userId) && (
          isUpdatingProfile || 
          isUpdatingBeneficiaries ||
          (isUpdatingCardRequest && data.cardStatus == 'requested') ||
          (isUpdatingVirtualCardRequest && data.hasPendingVirtualCardRequest == true) ||
          (isTogglingCardFreeze && (data.cardStatus == 'suspended' || data.cardStatus == 'active'))
        );
    }
    
    // User Profiles
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if request.auth.uid == userId;
      
      // Allow users to update their own profile under specific conditions
      allow update: if canUserUpdate(userId, request.resource.data);
      
      allow delete: if false; // Users should not be able to delete their own accounts
    }
    
    // Admin collection
    match /admins/{adminId} {
      // An authenticated user can read their own admin document to check their status.
      allow read: if isOwner(adminId);
      // Only other admins can modify the list of admins.
      allow write: if isAdmin();
    }
    
    // Chat collection
    match /chats/{chatId} {
      allow read, write: if request.auth.uid in resource.data.participants || isAdmin();
      
      match /messages/{messageId} {
        allow read: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants || isAdmin();
        allow create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        // Allow user to 'soft delete' their own message.
        allow update: if request.auth.uid == resource.data.senderId && request.resource.data.keys().hasOnly(['deletedForUser']);
        allow delete: if isAdmin();
      }
    }
    
    // KYC Submissions
    match /kycSubmissions/{userId} {
      // A user can only create their own submission.
      allow create: if isOwner(userId);
      // Only admins can read or delete submissions after processing.
      allow read, delete: if isAdmin();
    }
    
     // Billing Configuration
    match /config/billing {
      // Allow any authenticated user to read the billing config
      allow read: if request.auth != null;
      // Only admins can write/update the billing config
      allow write: if isAdmin();
    }
  }
}
