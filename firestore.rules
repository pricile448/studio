
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Fonctions d'aide ---
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // --- Collection des administrateurs ---
    match /admins/{adminId} {
      allow read: if request.auth != null;
      allow write: if false; 
    }

    // --- Collection des utilisateurs ---
    match /users/{userId} {
      function isOwner() {
        return request.auth != null && request.auth.uid == userId;
      }

      // LECTURE : Autorisée pour le propriétaire du document ou un administrateur.
      allow get: if isOwner() || isAdmin();
      // LISTE : Autorisée pour les administrateurs seulement.
      allow list: if isAdmin();

      // CRÉATION : Autorisée uniquement pour le propriétaire du document.
      allow create: if isOwner();

      // MISE À JOUR : Autorisée pour un administrateur (sans restriction) OU pour le propriétaire avec des règles strictes.
      allow update: if isAdmin() || (isOwner()
        // --- Champs Immuables (ne peuvent pas être modifiés par l'utilisateur) ---
        && request.resource.data.uid == resource.data.uid
        && request.resource.data.email == resource.data.email
        && request.resource.data.createdAt == resource.data.createdAt
        
        // --- Champs réservés à l'administration (ne peuvent pas être modifiés par l'utilisateur) ---
        && (
            (request.resource.data.kycStatus == 'pending' && resource.data.kycStatus == 'unverified') ||
            request.resource.data.kycStatus == resource.data.kycStatus
           )
        && request.resource.data.cardStatus == resource.data.cardStatus
        && request.resource.data.get('iban', null) == resource.data.get('iban', null)
        && request.resource.data.get('bic', null) == resource.data.get('bic', null)

        // --- Intégrité des soldes de comptes (l'utilisateur ne peut pas modifier les soldes) ---
        && request.resource.data.accounts.size() == resource.data.accounts.size()
        && (
          size(request.resource.data.accounts) == 0 ||
          (
            size(request.resource.data.accounts) > 0 &&
            request.resource.data.accounts[0].balance == resource.data.accounts[0].balance &&
            (size(request.resource.data.accounts) == 1 || request.resource.data.accounts[1].balance == resource.data.accounts[1].balance) &&
            (size(request.resource.data.accounts) == 2 || request.resource.data.accounts[2].balance == resource.data.accounts[2].balance)
          )
        )

        // --- Intégrité des tableaux (l'utilisateur peut seulement en ajouter) ---
        && request.resource.data.transactions.size() >= resource.data.transactions.size()
        && request.resource.data.documents.size() >= resource.data.documents.size()
      );
      
      // SUPPRESSION : Autorisée uniquement pour les administrateurs.
      allow delete: if isAdmin();
    }
    
    // --- Collection des conversations (chats) ---
    match /chats/{chatId} {
        function isParticipant() {
          return request.auth != null && request.auth.uid in resource.data.participants;
        }
      
        allow get: if isParticipant() || isAdmin();
        allow list: if isAdmin();
        allow create: if request.auth != null && request.auth.uid in request.resource.data.participants;
        allow update: if isParticipant() || isAdmin();
        allow delete: if isAdmin();

        // --- Sous-collection des messages ---
        match /messages/{messageId} {
            function isMessageOwner() {
              return request.auth != null && request.auth.uid == resource.data.senderId;
            }
          
            allow read: if isParticipant() || isAdmin();
            
            allow create: if isParticipant() && request.resource.data.senderId == request.auth.uid;
            
            // Un utilisateur peut "soft delete" son propre message.
            allow update: if isMessageOwner() 
                        && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['deletedForUser'])
                        && request.resource.data.deletedForUser == true;

            // Personne ne peut supprimer un message individuel depuis le client pour garder l'intégrité.
            allow delete: if false;
        }
    }
  }
}
