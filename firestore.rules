rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // =============================================
    // Helper Functions
    // =============================================
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // =============================================
    // Security Rules for Collections
    // =============================================

    // Admins Collection
    // Seuls les administrateurs existants peuvent lire cette collection.
    // Personne ne peut écrire directement pour éviter l'auto-promotion.
    match /admins/{adminId} {
      allow read: if isAdmin();
      allow write: if false; 
    }

    // Users Collection
    match /users/{userId} {
      // Les utilisateurs peuvent créer leur propre profil lors de l'inscription.
      allow create: if isUserAuthenticated() && isOwner(userId);
      
      // Les utilisateurs peuvent lire leurs propres données.
      // Les administrateurs peuvent lire les données de n'importe quel utilisateur.
      allow read: if isUserAuthenticated() && (isOwner(userId) || isAdmin());

      // Les utilisateurs peuvent mettre à jour leurs propres données, avec des restrictions.
      // Les administrateurs peuvent mettre à jour les données de n'importe quel utilisateur.
      allow update: if isUserAuthenticated() && (isOwner(userId) || isAdmin());
    }
    
    // Chats Collection
    match /chats/{chatId} {
      // Les participants à la conversation (utilisateur et conseiller) et les administrateurs peuvent lire.
      allow read: if isUserAuthenticated() && (request.auth.uid in resource.data.participants || isAdmin());
      
      // Les participants peuvent créer une conversation.
      allow create: if isUserAuthenticated() && request.auth.uid in request.resource.data.participants;
      
      // Les participants peuvent mettre à jour la conversation (ex: dernier message).
      // Les administrateurs peuvent réinitialiser une conversation.
      allow update: if isUserAuthenticated() && (request.auth.uid in resource.data.participants || isAdmin());
      
      // Uniquement les administrateurs peuvent supprimer la session de chat.
      allow delete: if isAdmin();
      
      // Messages Sub-collection
      match /messages/{messageId} {
        // Les participants et les administrateurs peuvent lire les messages.
        allow read: if isUserAuthenticated() && (request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants || isAdmin());
        
        // Seuls les participants peuvent créer un message.
        allow create: if isUserAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        
        // Les utilisateurs peuvent marquer leurs propres messages comme "supprimés".
        // Les administrateurs peuvent modifier les messages (pour suppression dure par ex).
        allow update: if isUserAuthenticated() && 
                       ( (isOwner(request.resource.data.senderId) && request.resource.data.deletedForUser == true) || isAdmin() );
                       
        // Uniquement les administrateurs peuvent supprimer physiquement un message.
        allow delete: if isAdmin();
      }
    }
  }
}
