
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    // Helper Functions
    // =================================
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // =================================
    // Users Collection
    // =================================
    match /users/{userId} {
      
      // --- Main Permissions ---
      allow read: if isOwner(userId);
      allow create: if request.resource.data.uid == request.auth.uid;
      allow update: if isOwner(userId) && isAllowedUpdate(userId);

      // --- Update Logic Function ---
      function isAllowedUpdate(userId) {
        // List of fields a user can freely edit on their profile.
        let allowedProfileFields = [
          'firstName', 'lastName', 'phone', 'dob', 'pob', 'nationality',
          'residenceCountry', 'address', 'city', 'postalCode', 'profession',
          'salary', 'photoURL', 'notificationPrefs', 'inactivityTimeout'
        ];

        // Condition 1: User is updating simple profile fields.
        let isProfileUpdate = request.resource.data.diff(resource.data).affectedKeys().hasOnly(allowedProfileFields);

        // Condition 2: User is managing their beneficiaries list (add/remove).
        let isBeneficiaryUpdate = request.resource.data.diff(resource.data).affectedKeys().hasOnly(['beneficiaries']);

        // Condition 3: User is requesting a new outgoing transfer.
        let isTransferRequest =
          // Ensure only the transactions list is being changed.
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['transactions']) &&
          // Ensure balances are NOT changed by the user.
          request.resource.data.accounts == resource.data.accounts &&
          // Ensure exactly one transaction is added.
          request.resource.data.transactions.size() == resource.data.transactions.size() + 1 &&
          // Ensure the new transaction is a 'pending' 'outgoing_transfer'.
          request.resource.data.transactions[request.resource.data.transactions.size() - 1].status == 'pending' &&
          request.resource.data.transactions[request.resource.data.transactions.size() - 1].type == 'outgoing_transfer';
          
        // Condition 4: User is requesting a physical card for the first time.
        let isPhysicalCardRequest =
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['cardStatus', 'cardType', 'cardRequestedAt']) &&
          request.resource.data.cardStatus == 'requested' &&
          resource.data.cardStatus == 'none';
        
        // Condition 5: User is requesting a virtual card.
        let isVirtualCardRequest =
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['hasPendingVirtualCardRequest', 'virtualCardRequestedAt']);

        // A user is allowed to update if ANY of these conditions are true.
        return isProfileUpdate || isBeneficiaryUpdate || isTransferRequest || isPhysicalCardRequest || isVirtualCardRequest;
      }
    }
    
    // =================================
    // Admins Collection
    // =================================
    match /admins/{adminId} {
      // Only backend (with admin credentials) can access this collection.
      allow read, write: if false;
    }

    // =================================
    // Chats Collection
    // =================================
    match /chats/{chatId} {
      // Checks if the requesting user is a participant in the chat.
      function isParticipant() {
        return isAuthenticated() && request.auth.uid in resource.data.participants;
      }

      allow read, update: if isParticipant();

      match /messages/{messageId} {
        allow read: if isParticipant();
        allow create: if isParticipant() && request.auth.uid == request.resource.data.senderId;
        // Allows a user to "soft delete" their OWN messages by setting a flag.
        allow update: if isParticipant() &&
                        resource.data.senderId == request.auth.uid &&
                        request.resource.data.keys().hasOnly(['deletedForUser']) &&
                        request.resource.data.deletedForUser == true;
      }
    }
  }
}
