rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Fonctions utilitaires ---
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    function isParticipant(participants) {
      return request.auth != null && request.auth.uid in participants;
    }

    // --- Accès administrateur global ---
    match /{document=**} {
      allow read, write: if isAdmin();
    }

    // --- Utilisateurs ---
    match /users/{userId} {
      // Lecture : uniquement le propriétaire du document
      allow read: if isOwner(userId);

      // Création : uniquement lors de l'inscription
      allow create: if isOwner(userId);

      // Mise à jour : règles détaillées
      allow update: if isOwner(userId) && canUserUpdate();

      function canUserUpdate() {
        let affected = request.resource.data.diff(resource.data).affectedKeys();

        // 1. Soumission KYC : l'utilisateur ne peut que soumettre ses documents une seule fois
        let isSubmittingKYC = resource.data.kycStatus == 'unverified'
          && request.resource.data.kycStatus == 'pending'
          && affected.hasOnly(['kycStatus', 'kycSubmittedAt', 'kycDocuments']);

        // 2. Mise à jour générale du profil (champs non sensibles)
        let isGeneralUpdate = !affected.hasAny([
          'uid', 'email', 'createdAt', 'kycStatus', 'accounts', 'iban', 'bic',
          'transactions', 'cardStatus', 'physicalCard', 'cardType'
        ]);

        // 3. Gestion des listes (Bénéficiaires, Budgets, Documents)
        let isManagingBeneficiaries = affected.hasOnly(['beneficiaries']);
        let isManagingBudgets = affected.hasOnly(['budgets']);
        let isManagingDocuments = affected.hasOnly(['documents']);
        let isManagingVirtualCards = affected.hasOnly(['virtualCards']);

        // 4. Demande de carte physique
        let isRequestingPhysicalCard = resource.data.cardStatus == 'none'
          && request.resource.data.cardStatus == 'requested'
          && affected.hasOnly(['cardStatus', 'cardType', 'cardRequestedAt']);

        // 5. Demande de carte virtuelle
        let isRequestingVirtualCard = (resource.data.hasPendingVirtualCardRequest == false || resource.data.hasPendingVirtualCardRequest == null)
          && request.resource.data.hasPendingVirtualCardRequest == true
          && affected.hasOnly(['hasPendingVirtualCardRequest', 'virtualCardRequestedAt']);
          
        // 6. Blocage/déblocage d'une carte par l'utilisateur (pas par l'admin)
        let isTogglingPhysicalCardFreeze = (resource.data.cardStatus == 'active' || resource.data.cardStatus == 'suspended')
          && request.resource.data.physicalCard.suspendedBy != 'admin'
          && affected.hasOnly(['cardStatus', 'physicalCard']);
          
        // 7. Demande de virement externe
        let isRequestingTransfer = affected.hasOnly(['transactions']);

        return isSubmittingKYC
          || isGeneralUpdate
          || isManagingBeneficiaries
          || isManagingBudgets
          || isManagingDocuments
          || isManagingVirtualCards
          || isRequestingPhysicalCard
          || isRequestingVirtualCard
          || isTogglingPhysicalCardFreeze
          || isRequestingTransfer;
      }
    }

    // --- Admins ---
    match /admins/{adminId} {
      allow read: if isOwner(adminId);
    }

    // --- Config (facturation) ---
    match /config/billing {
      allow read: if request.auth != null;
    }

    // --- Messagerie ---
    match /chats/{chatId} {
      allow get, list: if isParticipant(resource.data.participants);
      allow update: if isParticipant(resource.data.participants);

      match /messages/{messageId} {
        allow read: if isParticipant(get(/databases/$(database)/documents/chats/$(chatId)).data.participants);
        allow create: if isParticipant(get(/databases/$(database)/documents/chats/$(chatId)).data.participants);
        allow update: if request.auth.uid == resource.data.senderId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['deletedForUser']);
      }
    }
  }
}
