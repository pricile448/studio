
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isSignedIn() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // --- User Update Logic Functions ---
    // Checks if the update is only for general profile information.
    function isUpdatingProfile() {
      return request.resource.data.diff(resource.data).affectedKeys()
        .hasOnly(['firstName', 'lastName', 'phone', 'dob', 'address', 'city', 'postalCode', 'residenceCountry', 'profession', 'salary', 'notificationPrefs', 'inactivityTimeout']);
    }

    // Checks if the user is making a valid request for a physical card.
    function isRequestingPhysicalCard() {
      return request.resource.data.cardStatus == 'requested'
        && resource.data.cardStatus == 'none'
        && request.resource.data.cardRequestedAt is timestamp
        && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['cardStatus', 'cardRequestedAt']);
    }
    
    // Checks if the user is adding exactly one new virtual card and not changing anything else.
    function isAddingVirtualCard() {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['virtualCards'])
        && request.resource.data.virtualCards.size() == (
            'virtualCards' in resource.data ? resource.data.virtualCards.size() : 0
        ) + 1;
    }

    // --- Main Rules ---
    match /admins/{adminId} {
      allow read, write: if isOwner(adminId);
    }

    match /users/{userId} {
      // Any authenticated user can create their own document.
      allow create: if isOwner(userId);
      
      // Users can read their own data. Admins can read any user's data.
      allow read: if isOwner(userId) || isAdmin();
      
      // Users can update their own document only under specific, safe conditions. Admins can update any user document.
      allow update: if (isOwner(userId) && (isUpdatingProfile() || isRequestingPhysicalCard() || isAddingVirtualCard())) || isAdmin();
      
      // Only admins can delete user documents.
      allow delete: if isAdmin();
    }

    match /chats/{chatId} {
      // Participants of a chat or admins can read/write to the chat document.
      allow read, write: if isSignedIn() && (request.auth.uid in resource.data.participants || isAdmin());
      
      match /messages/{messageId} {
        // Participants or admins can read and create messages.
        allow read, create: if isSignedIn() && (request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants || isAdmin());
        
        // Allow users to soft-delete their own messages (update the deletedForUser flag). Admins can update any field.
        allow update: if (isSignedIn() && (request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['deletedForUser'])) 
                     || isAdmin();
        
        // Only admins can permanently delete messages.
        allow delete: if isAdmin();
      }
    }
  }
}
