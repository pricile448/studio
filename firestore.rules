
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    // Helper Functions
    // =================================

    function isAdmin() {
      // Checks if the requesting user's UID is in the 'admins' collection.
      // This is a secure way to check for administrative privileges.
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    function isOwner(userId) {
      // Checks if the requesting user is the owner of the document they are trying to access.
      return request.auth.uid == userId;
    }

    // =================================
    // Collection Rules
    // =================================

    match /users/{userId} {
      // READ: An admin can read any user's data. A user can only read their own data.
      allow read: if isAdmin() || isOwner(userId);
      
      // CREATE: A user can create their own document during the signup process.
      allow create: if isOwner(userId);

      // UPDATE: An admin can update any user's document. A user can update their own document.
      // Complex business logic (like ensuring a transfer request is 'pending' or that a balance
      // is only modified by a trusted process) should be handled by server-side code (Firebase Functions or Server Actions),
      // not by complex client-side security rules. This rule allows authorized clients to make valid update requests.
      allow update: if isAdmin() || isOwner(userId);
      
      // DELETE: Only administrators can delete user documents. This is a critical and destructive action.
      allow delete: if isAdmin();
    }

    match /admins/{adminId} {
      // READ: Only other admins can see who is an admin. Regular users cannot.
      allow read: if isAdmin();
      
      // WRITE: To prevent privilege escalation, no one can modify the admins collection from the client-side.
      // This must be managed directly from the Firebase console.
      allow write: if false;
    }

    match /chats/{chatId} {
        // READ, WRITE: Access to a chat document (to read participants, etc.) is granted to admins or participants of the chat.
        allow read, write: if isAdmin() || (request.auth.uid in resource.data.participants);
        
        match /messages/{messageId} {
            // READ, WRITE: To read or write a message, the user must be a participant in the parent chat document or an admin.
            // The get() function retrieves the parent chat document to check the participants list.
            allow read, write: if isAdmin() || (request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants);
        }
    }
  }
}
