rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isUpdating(fields) {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields);
    }
    
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if request.auth.uid == userId;
      
      allow update: if isOwner(userId) && (
        // Case 1: Updating general profile information (excluding sensitive fields)
        isUpdating(['firstName', 'lastName', 'phone', 'dob', 'pob', 'nationality', 'residenceCountry', 'address', 'city', 'postalCode', 'profession', 'salary', 'notificationPrefs', 'inactivityTimeout']) ||
        
        // Case 2: User is requesting a physical card for the first time
        (
          resource.data.cardStatus == 'none' &&
          request.resource.data.cardStatus == 'requested' &&
          request.resource.data.cardType in ['essentielle', 'precieuse', 'luminax'] &&
          isUpdating(['cardStatus', 'cardType', 'cardRequestedAt'])
        ) ||
        
        // Case 3: User is adding a virtual card
        (
          request.resource.data.virtualCards.size() == resource.data.virtualCards.size() + 1 &&
          isUpdating(['virtualCards'])
        )
      );
    }
    
    match /admins/{adminId} {
      allow read, write: if isOwner(adminId);
    }

    match /chats/{chatId} {
      allow read, write: if request.auth != null && request.auth.uid in resource.data.participants;

      match /messages/{messageId} {
        allow read, create: if request.auth != null && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
        allow update: if request.auth != null && request.resource.data.keys().hasOnly(['deletedForUser']);
        allow delete: if false; 
      }
    }
  }
}
