rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // =================================
    // Helper Functions
    // =================================
    
    // Vérifie si l'utilisateur authentifié est le propriétaire du document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Vérifie si une requête est authentifiée
    function isAuthenticated() {
      return request.auth != null;
    }

    // Vérifie si l'utilisateur authentifié est un administrateur
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // =================================
    // User Document Validation Functions
    // =================================

    // Valide la mise à jour des champs de profil de base par l'utilisateur
    function isUpdatingOwnProfile() {
      let editableFields = ['firstName', 'lastName', 'phone', 'dob', 'pob', 'nationality', 'residenceCountry', 'address', 'city', 'postalCode', 'profession', 'salary', 'photoURL', 'notificationPrefs', 'inactivityTimeout'];
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(editableFields);
    }

    // Valide l'ajout d'un nouveau bénéficiaire
    function isAddingBeneficiary() {
      let before = resource.data.beneficiaries;
      let after = request.resource.data.beneficiaries;
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['beneficiaries']) &&
             after.size() == before.size() + 1;
    }

    // Valide la suppression d'un bénéficiaire
    function isRemovingBeneficiary() {
      let before = resource.data.beneficiaries;
      let after = request.resource.data.beneficiaries;
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['beneficiaries']) &&
             after.size() == before.size() - 1;
    }
    
    // Valide une nouvelle demande de virement (statut "pending" obligatoire)
    function isRequestingTransfer() {
      // S'assurer que seul le tableau des transactions est modifié
      if (!request.resource.data.diff(resource.data).affectedKeys().hasOnly(['transactions'])) {
        return false;
      }
      
      let beforeTx = resource.data.transactions;
      let afterTx = request.resource.data.transactions;
      let newTx = afterTx[afterTx.size() - 1];
      
      return afterTx.size() == beforeTx.size() + 1 &&
             newTx.status == 'pending' &&
             newTx.type == 'outgoing_transfer';
    }

    // Valide les modifications de carte autorisées pour un utilisateur (bloquer/débloquer, etc.)
    function isModifyingCardByUser() {
      let allowedCardFields = ['cardStatus', 'physicalCard', 'cardRequestedAt', 'cardType', 'hasPendingVirtualCardRequest', 'virtualCardRequestedAt', 'virtualCards', 'documents'];
      return request.resource.data.diff(resource.data).affectedKeys().hasAny(allowedCardFields);
    }
    
    // =================================
    // Collection Rules
    // =================================

    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isAuthenticated();
      
      // La mise à jour est autorisée si l'utilisateur est le propriétaire ET que l'une des conditions de modification est remplie,
      // OU si l'utilisateur est un administrateur (qui a des droits complets).
      allow update: if (isOwner(userId) && (
                      isUpdatingOwnProfile() ||
                      isAddingBeneficiary() ||
                      isRemovingBeneficiary() ||
                      isRequestingTransfer() ||
                      isModifyingCardByUser()
                    )) || isAdmin();
                    
      allow delete: if isAdmin(); // Seuls les admins peuvent supprimer un utilisateur
    }

    match /chats/{chatId} {
        allow read, write: if request.auth.uid in resource.data.participants || isAdmin();
        
        match /messages/{messageId} {
            allow read: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants || isAdmin();
            allow create: if isOwner(request.resource.data.senderId);
            
            // Permet à l'utilisateur de "supprimer pour soi" (soft delete) ou à un admin de faire des modifications plus larges
            allow update: if (isOwner(resource.data.senderId) && request.resource.data.keys().hasOnly(['deletedForUser'])) || isAdmin();
            allow delete: if isAdmin();
        }
    }
    
    match /admins/{adminId} {
      allow read: if isAdmin();
      // Empêche toute modification de la liste des admins depuis le client
      allow write: if false; 
    }
  }
}
